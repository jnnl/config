#!/bin/bash
# install packages and setup os config

set -eu
source utils

configure_mac() {
    msg "Configuring macOS defaults..."

    # Expand save panels
    defaults write -g NSNavPanelExpandedStateForSaveMode -bool true
    defaults write -g NSNavPanelExpandedStateForSaveMode2 -bool true

    # Disable automatic text meddling
    defaults write -g NSAutomaticSpellingCorrectionEnabled -bool false
    defaults write -g NSAutomaticCapitalizationEnabled -bool false
    defaults write -g NSAutomaticDashSubstitutionEnabled -bool false
    defaults write -g NSAutomaticPeriodSubstitutionEnabled -bool false
    defaults write -g NSAutomaticQuoteSubstitutionEnabled -bool false

    # Show filename extensions
    defaults write -g AppleShowAllExtensions -bool true

    # Disable inverted scrolling
    defaults write -g com.apple.swipescrolldirection -bool false

    # Enable font smoothing
    defaults write -g CGFontRenderingFontSmoothingDisabled -bool false

    # Disable animations
    defaults write -g NSAutomaticWindowAnimationsEnabled -bool false
    defaults write -g QLPanelAnimationDuration -float 0
    defaults write com.apple.finder DisableAllAnimations -bool true

    # Show full paths
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

    # Autohide Dock
    defaults write com.apple.dock autohide -bool true

    # Disable screenshot shadows
    defaults write com.apple.screencapture disable-shadow -bool true

    # Show ~/Library in Finder
    chflags nohidden ~/Library

    killall Dock Finder

    msg_done
}

install_homebrew() {
    if has brew; then
        warn "Homebrew already installed, skipping..."
        return
    fi

    msg "Installing Homebrew..."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

    msg_done
}

install_ubuntu_pkgs() {
    msg "Installing packages for Ubuntu..."

    local pkgs="fd-find neovim nodejs python3-pip renameutils ripgrep"
    sudo apt update
    sudo apt install $pkgs
    python3 -m pip install --user pynvim jedi-language-server

    msg_done
}

install_arch_pkgs() {
    msg "Installing packages for Arch Linux..."

    local pkgs="bc fd git htop jq neovim nodejs openssh python renameutils ripgrep"
    sudo pacman -Syyu --needed $pkgs
    python3 -m pip install --user pynvim jedi-language-server

    msg_done
}

install_vimplug() {
    msg "Installing vim-plug..."

    local plugdir="$HOME/.vim/autoload"
    local url="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"

    mkdir -vp "$plugdir"
    dl "$plugdir/plug.vim" "$url"

    if has vim; then
        vim +PlugUpdate +qa
    elif has nvim; then
        nvim +PlugUpdate +qa
    else
        warn "No vim or neovim found, skipping vim-plug install."
        return
    fi

    msg_done
}

install_blocklets() {
    msg "Installing i3blocks blocklets..."

    local blockletdir="$configdir/i3blocks/blocklets"
    local tmpdir="$(mktemp -d /tmp/i3blocks-blocklets-XXX)"
    local url="https://github.com/vivien/i3blocks-contrib"

    if has git; then
        git clone --depth 1 "$url" "$tmpdir"
        rm -rf "$blockletdir"
        mv "$tmpdir" "$blockletdir"
    else
        warn "Git not found, skipping blocklets install."
        return
    fi

    msg_done
}

install_fzf() {
    msg "Installing fzf..."

    local fzfdir="$HOME/.fzf"
    local tmpdir="$(mktemp -d /tmp/fzf-XXX)"
    local url="https://github.com/junegunn/fzf.git"

    if has git; then
        git clone --depth 1 "$url" "$tmpdir"
        rm -rf "$fzfdir"
        mv "$tmpdir" "$fzfdir"

        chmod ug+x "$fzfdir/install"
        "$fzfdir/install" --key-bindings \
                          --completion \
                          --no-zsh \
                          --no-fish \
                          --no-update-rc \
                          1>/dev/null
    else
        warn "Git not found, skipping fzf install."
        return
    fi

    msg_done
}

install_z() {
    msg "Installing z..."

    local zdir="$configdir/z"
    local url="https://raw.githubusercontent.com/rupa/z/master/z.sh"

    mkdir -vp "$zdir"
    dl "$zdir/z.sh" "$url"

    msg_done
}

install_langservers() {
    msg "Installing language servers..."

    local servers="pyright typescript-language-server vim-language-server vscode-css-languageserver-bin"
    sudo npm i -g "$langservers"

    msg_done
}

main() {
    if is_mac; then
        configure_mac
        install_homebrew
    elif is_linux; then
        if is_distro arch; then
            install_arch_pkgs
            install_blocklets
        elif is_distro ubuntu; then
            install_ubuntu_pkgs
        fi
    fi

    install_fzf
    install_vimplug
    install_z
    #install_langservers

    printf "<<< base install complete\n\n"
}

main
