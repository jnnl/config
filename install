#!/usr/bin/env bash
# Installer script for dotfiles, configs and essential packages

function has {
    type -p "$1" &>/dev/null
}

function is_arch {
    grep -qi archlinux /etc/os-release
}

function is_ubuntu {
    grep -qi ubuntu /etc/os-release
}

function is_linux {
    test "$(uname -s)" = Linux
}

function is_mac {
    test "$(uname -s)" = Darwin
}

function is_root {
    test "$EUID" = 0
}

function pkg_prompt {
    echo "Couldn't install packages. Continue? [Y/n]"
    read -r -s -n 1 choice 
    if echo "$choice" | grep -iq "^y" || [ -z "$choice" ]; then
        return
    else
        echo "Exiting..."
        exit
    fi
}

# Backup config files to the backup directory
function backup_config {
    echo "Backing up existing config files to $BACKUPDIR..."
    mkdir -vp "$BACKUPDIR"

    for file in $FILES; do
        if [ -L "$HOME/.$file" ]; then
            mv -v "$(readlink "$HOME/.$file")" "$BACKUPDIR/$file"
        elif [ -f "$HOME/.$file" ]; then
            mv -v "$HOME/.$file" "$BACKUPDIR/$file"
        fi
    done

    if [ -f "$CONFIGDIR/git/config" ]; then
        mv -v "$CONFIGDIR/git/config" "$BACKUPDIR/git_config"
    fi
    if [ -f "$CONFIGDIR/git/ignore" ]; then
        mv -v "$CONFIGDIR/git/ignore" "$BACKUPDIR/git_ignore"
    fi

    if has i3 && [ -f "$CONFIGDIR/i3/config" ]; then
        mv -v "$CONFIGDIR/i3/config" "$BACKUPDIR/i3_config"
    fi
    if has i3status && [ -f "CONFIGDIR/i3status/config" ]; then
        mv -v "$CONFIGDIR/i3status/config" "$BACKUPDIR/i3status_config"
    fi
    if has i3blocks && [ -f "CONFIGDIR/i3blocks/config" ]; then
        mv -v "$CONFIGDIR/i3blocks/config" "$BACKUPDIR/i3blocks_config"
    fi

    echo -e "done\n"
}

# Copy config files from the repo to the config file directory
function copy_config {
    echo "Copying config files to $DOTFILEDIR..."

    for file in $FILES; do
        cp -v "$SOURCEDIR/$file" "$DOTFILEDIR/"
    done

    cp -v "$SOURCEDIR/git_config" "$DOTFILEDIR/"
    cp -v "$SOURCEDIR/git_ignore" "$DOTFILEDIR/"

    if has i3; then
        cp -v "$SOURCEDIR/i3_config" "$DOTFILEDIR/"
    fi
    if has i3status; then
        cp -v "$SOURCEDIR/i3status_config" "$DOTFILEDIR/"
    fi
    if has i3blocks; then
        cp -v "$SOURCEDIR/i3blocks_config" "$DOTFILEDIR/"
    fi

    echo -e "done\n"
}

# Create symlinks of the config files to home directory
function link_config {
    echo "Linking config files..."

    for file in $FILES; do
        ln -vsf "$DOTFILEDIR/$file" "$HOME/.$file"
    done

    mkdir -vp "$CONFIGDIR/git"
    ln -vsf "$DOTFILEDIR/git_config" "$CONFIGDIR/git/config"
    ln -vsf "$DOTFILEDIR/git_ignore" "$CONFIGDIR/git/ignore"
    
    if has i3; then
        mkdir -vp "$CONFIGDIR/i3"
        ln -vsf "$DOTFILEDIR/i3_config" "$CONFIGDIR/i3/config"
    fi
    if has i3status; then
        mkdir -vp "$CONFIGDIR/i3status"
        ln -vsf "$DOTFILEDIR/i3status_config" "$CONFIGDIR/i3status/config"
    fi
    if has i3blocks; then
        mkdir -vp "$CONFIGDIR/i3blocks"
        ln -vsf "$DOTFILEDIR/i3blocks_config" "$CONFIGDIR/i3blocks/config"
    fi

    echo -e "done\n"
}

# Install config files
function install_config {
    backup_config && copy_config && link_config
}

# Initialize neovim environment
function init_neovim {
    if [ ! -d "$CONFIGDIR/nvim" ]; then
        mkdir -vp "$CONFIGDIR"
        ln -vs "$HOME/.vim" "$CONFIGDIR/nvim" && \
	ln -vsf "$HOME/.vimrc" "$CONFIGDIR/nvim/init.vim"
    fi
}

# Initialize macOS environment
function init_mac {
    install_homebrew
}

# Initialize Arch Linux environment
function install_arch_pkgs {
    is_arch || return
    if ! pacman -Q $PACMAN_PKGS &>/dev/null; then
        if sudo pacman -Sy --needed $PACMAN_PKGS; then
            echo -e "done\n"
        else
            pkg_prompt
        fi
    fi
}

# Initialize Ubuntu environment
function install_ubuntu_pkgs {
    is_ubuntu || return
    if sudo apt-get update && ! dpkg -l $APT_PKGS; then
        if sudo apt-get install $APT_PKGS; then
            echo -e "done\n"
        else
            pkg_prompt
        fi
    fi
}

# Install homebrew
function install_homebrew {
    is_mac || return
    if ! has brew; then
        echo "Installing Homebrew..."
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" &&
        brew install "$BREW_PKGS" && echo -e "done\n"
    else
        echo "Homebrew already installed, skipping..."
    fi
}

# Install vim-plug
function install_vimplug {
    if (has vim || has nvim); then
        if has curl; then
            echo "Installing vim-plug..."
            curl -#fLo "$HOME/.vim/autoload/plug.vim" --create-dirs \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim && \
            if has vim; then
                vim +PlugInstall +qa && echo -e "done\n"
            elif has nvim; then
                nvim +PlugInstall +qa && echo -e "done\n"
            fi
        elif has wget; then
            echo "Installing vim-plug..."
            mkdir -vp "$HOME/.vim/autoload/"
            if wget --show-progress -qO "$HOME/.vim/autoload/plug.vim" \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim; then
                if has vim; then
                    vim +PlugInstall +qa && echo -e "done\n"
                elif has nvim; then
                    nvim +PlugInstall +qa && echo -e "done\n"
                fi
            fi
        else
            echo "No curl or wget found, skipping vim-plug install."
        fi
    else
        echo "No vim or neovim found, skipping vim-plug install."
    fi
    echo ""
}

# Install fzf
function install_fzf {
    if [ -x "$HOME"/.fzf/install ]; then
        echo "Installing FZF..."
        "$HOME/.fzf/install" --key-bindings --completion --no-update-rc 1>/dev/null && \
        echo "done"
    elif has git; then
        echo "Installing FZF..."
        rm -rf "$HOME/.fzf"
        git clone --depth 1 https://github.com/junegunn/fzf.git "$HOME/.fzf" && \
        "$HOME/.fzf/install" --key-bindings --completion --no-update-rc 1>/dev/null && \
        echo "done"
    else
        echo "Git not found, skipping FZF install."
    fi
    echo ""
}

# Install z
function install_z {
    [ ! -d "$CONFIGDIR/z" ] && mkdir -v "$CONFIGDIR/z"
    if has curl; then
        echo "Installing z..."
        curl -#fLo "$CONFIGDIR/z/z.sh" \
        https://raw.githubusercontent.com/rupa/z/master/z.sh && \
        echo "done"
    elif has wget; then
        echo "Installing z..."
        wget --show-progress -qO "$CONFIGDIR/z/z.sh" \
        https://raw.githubusercontent.com/rupa/z/master/z.sh && \
        echo "done"
    else
        echo "No curl or wget found, skipping z install."
    fi
}

# Config directory
CONFIGDIR="$HOME/.config"
# Dotfile directory
DOTFILEDIR="$CONFIGDIR/dotfiles"
# Dotfile backup directory
BACKUPDIR="$DOTFILEDIR/backup"
# Directory of this script
SOURCEDIR="$(cd "$(dirname "$0")" && pwd)"

# Config files to install
FILES="bash_profile bashrc vimrc tmux.conf"
BREW_PKGS="bash bash_completion ctags neovim python3 ripgrep tmux tree vim"
PACMAN_PKGS="adobe-source-code-pro-fonts bash-completion ctags git gvim neovim"
PACMAN_PKGS+=" python3 ripgrep strace tmux tree unzip"
APT_PKGS="curl python3 tree"

if is_linux; then
    FILES+=" xinitrc Xmodmap Xresources"
elif is_mac; then
    FILES+=" xvimrc"
fi

# OS-specific configuration
if is_mac; then
    init_mac
elif is_arch; then
    [ "$1" = pkg ] && install_arch_pkgs
elif is_ubuntu; then
    [ "$1" = pkg ] && install_ubuntu_pkgs
fi

has nvim && init_neovim

install_config
install_vimplug
install_fzf
install_z

echo "done"
