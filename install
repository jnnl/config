#!/bin/bash
# dotfiles installer

set -eu

readonly kernel="$(uname -s)"
readonly scriptdir="$(dirname ${BASH_SOURCE[0]})"
readonly configdir="~/.config"
readonly dotfiledir="$configdir/dotfiles"
readonly backupdir="$dotfiledir/backup"
readonly bindir="~/code/bin"

die() {
    echo "ERROR: $*"
    exit 1
}

edone() {
    echo "done"
    echo ""
}

has() {
    type -p $* &>/dev/null
}

exists() {
    local file
    for file in $*; do
        test -e "$file" || return 1
    done
}

is_linux() {
    test "$kernel" = Linux
}

is_mac() {
    test "$kernel" = Darwin
}

dl() {
    if has curl; then
        curl -#fLo $*
    elif has wget; then
        wget --show-progress -qO $*
    else
        die "no curl or wget found"
    fi
}

backup_config() {
    echo "Backing up existing config files to $backupdir ..."
    mkdir -p "$backupdir"

    local file
    for file in $files; do
        exists "~/.$file" && cp -v "~/.$file" "$backupdir/$file"
    done

    exists "$configdir/nvim/init.vim" \
        && cp -v "$configdir/nvim/init.vim" "$backupdir/nvimrc"
    exists "$configdir/git/config" \
        && cp -v "$configdir/git/config" "$backupdir/git_config"
    exists "$configdir/git/ignore" \
        && cp -v "$configdir/git/ignore" "$backupdir/git_ignore"
    exists "$configdir/i3/config" \
        && cp -v "$configdir/i3/config" "$backupdir/i3_config"
    exists "$configdir/i3status/config" \
        && cp -v "$configdir/i3status/config" "$backupdir/i3status_config"
    exists "$configdir/i3blocks/config" \
        && cp -v "$configdir/i3blocks/config" "$backupdir/i3blocks_config"
    exists "$configdir/kitty/kitty.conf" \
        && cp -v "$configdir/kitty/kitty.conf" "$backupdir/kitty.conf"

    edone
}

copy_config() {
    echo "Copying config files to $dotfiledir..."
    mkdir -p "$dotfiledir"

    local file
    for file in $files; do
        cp -v "$scriptdir/$file" "$dotfiledir"
    done

    local dirfiles="git_config git_ignore i3_config i3status_config i3blocks_config kitty.conf"
    for file in $dirfiles; do
        cp -v "$scriptdir/$file" "$dotfiledir"
    done

    edone
}

link_config() {
    echo "Linking config files..."

    local file
    for file in $files; do
        ln -vsf "$dotfiledir/$file" "~/.$file"
    done

    test -h "$configdir/nvim" && rm "$configdir/nvim"
    mkdir -p "$configdir/nvim"
    cat > "$configdir/nvim/init.vim" <<EOF
set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath
source ~/.vimrc
EOF

    mkdir -p "$configdir/git"
    ln -vsf "$dotfiledir/git_config" "$configdir/git/config"
    ln -vsf "$dotfiledir/git_ignore" "$configdir/git/ignore"

    mkdir -p "$configdir/"{i3,i3status,i3blocks}
    ln -vsf "$dotfiledir/i3_config" "$configdir/i3/config"
    ln -vsf "$dotfiledir/i3status_config" "$configdir/i3status/config"
    ln -vsf "$dotfiledir/i3blocks_config" "$configdir/i3blocks/config"

    mkdir -p "$configdir/kitty"
    ln -vsf "$dotfiledir/kitty.conf" "$configdir/kitty/kitty.conf"

    edone
}

configure_mac() {
    is_mac || return 1

    # Expand save panels
    defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
    defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

    # Disable automatic text meddling
    defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false
    defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false
    defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false
    defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false
    defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false

    # Show filename extensions
    defaults write NSGlobalDomain AppleShowAllExtensions -bool true

    # Disable inverted scrolling
    defaults write NSGlobalDomain com.apple.swipescrolldirection -bool false

    # Disable Finder animations
    defaults write com.apple.finder DisableAllAnimations -bool true
    # Show full paths
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

    # Autohide Dock
    defaults write com.apple.dock autohide -bool true

    # Disable screenshot shadows
    defaults write com.apple.screencapture disable-shadow -bool true

    # Show ~/Library in Finder
    chflags nohidden ~/Library

    killall Dock Finder
}

install_homebrew() {
    is_mac || return 1

    if has brew; then
        echo "Homebrew already installed, skipping..."
        return
    fi

    echo "Installing Homebrew..."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    edone
}

install_vimplug() {
    echo "Installing vim-plug..."

    local plugdir="~/.vim/autoload"
    local url="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"

    mkdir -p "$plugdir"
    dl "$plugdir/plug.vim" "$url"

    if has vim; then
        vim +PlugUpdate +qa
        edone
    elif has nvim; then
        nvim +PlugUpdate +qa
        edone
    else
        echo "No vim or neovim found, skipping vim-plug install."
        return
    fi
}

install_fzf() {
    echo "Installing fzf..."

    local fzfdir="~/.fzf"
    local url="https://github.com/junegunn/fzf.git"

    if test -x "$fzfdir/install"; then
        (
        cd "$fzfdir"
        if ! git diff --quiet origin/master; then
            git stash
            git pull
        fi
        )

        "$fzfdir/install" --key-bindings \
                          --completion \
                          --no-update-rc \
                          --no-zsh \
                          --no-fish \
                          1>/dev/null
        edone
    elif has git; then
        rm -rf "$fzfdir"
        git clone --depth 1 "$url" "$fzfdir"

        "$fzfdir/install" --key-bindings --completion --no-update-rc 1>/dev/null
        edone
    else
        echo "Git not found, skipping fzf install."
        return
    fi
}

install_z() {
    echo "Installing z..."

    local zdir="$configdir/z"
    local url="https://raw.githubusercontent.com/rupa/z/master/z.sh"

    mkdir -p "$zdir"
    dl "$zdir/z.sh" "$url"

    edone
}

install_v() {
    echo "Installing v..."

    local url="https://raw.githubusercontent.com/rupa/v/master/v"

    mkdir -pv "$bindir"

    dl "$bindir/v" "$url"
    chmod ug+x "$bindir/v"

    edone
}

main() {
    local files="bash_profile bashrc vimrc tmux.conf"

    if is_mac; then
        files+=" xvimrc"
        configure_mac
        install_homebrew
    elif is_linux; then
        files+=" xinitrc Xmodmap Xresources"
    fi

    backup_config
    copy_config
    link_config

    install_vimplug
    install_fzf
    install_z
    install_v

    echo "all done"
}

main
