#!/usr/bin/env bash
# Installer script for dotfiles and configs

OS=$(uname -s)
# Config directory
CONFIGDIR="$HOME/.config"
# Dotfile directory
DOTFILEDIR="$CONFIGDIR/dotfiles"
# Dotfile backup directory
BACKUPDIR="$DOTFILEDIR/backup"
# Directory of this script
SOURCEDIR="$(cd "$(dirname "$0")" && pwd)"

# Config files to install
FILES="bash_profile bashrc gitconfig vimrc tmux.conf"
BREW_PKGS="bash bash_completion ctags neovim python3 ripgrep tmux tree vim"

if [[ "$OS" == "Linux" ]]; then
    FILES+=" xinitrc Xmodmap Xresources"
elif [[ "$OS" == "Darwin" ]]; then
    FILES+=" xvimrc"
fi

# Check executable
function has {
    type -p $1 &>/dev/null
}

# Backup config files to the backup directory
function backup_config {
    echo "Backing up existing config files to $BACKUPDIR..."
    mkdir -vp "$BACKUPDIR"

    for file in $FILES; do
        if [ -L "$HOME/.$file" ]; then
            mv -v $(readlink "$HOME/.$file") "$BACKUPDIR/$file"
        elif [ -f "$HOME/.$file" ]; then
            mv -v "$HOME/.$file" "$BACKUPDIR/$file"
        fi
    done

    if has i3 && [ -f "$CONFIGDIR/i3/config" ]; then
        mv -v "$CONFIGDIR/i3/config" "$BACKUPDIR/i3config"
    fi

    echo -e "done\n"
}

# Copy config files from the repo to the config file directory
function copy_config {
    echo "Copying config files to $DOTFILEDIR..."

    for file in $FILES; do
        cp -v "$SOURCEDIR/$file" "$DOTFILEDIR/"
    done

    if has i3; then
        cp -v "$SOURCEDIR/i3config" "$DOTFILEDIR/"
    fi

    echo -e "done\n"
}

# Create symlinks of the config files to home directory
function link_config {
    echo "Linking config files..."

    for file in $FILES; do
        ln -vsf "$DOTFILEDIR/$file" "$HOME/.$file"
    done
    
    if has i3; then
        mkdir -vp "$CONFIGDIR/i3"
        ln -vsf "$DOTFILEDIR/i3config" "$CONFIGDIR/i3/config"
    fi

    has nvim && init_neovim

    echo -e "done\n"
}

# Install config files
function install_config {
    backup_config && copy_config && link_config
}

# Initialize neovim environment
function init_neovim {
    if [ ! -d "$CONFIGDIR/nvim" ]; then
        mkdir -vp "$CONFIGDIR"
        ln -vs "$HOME/.vim" "$CONFIGDIR/nvim" && \
	ln -vsf "$HOME/.vimrc" "$CONFIGDIR/nvim/init.vim"
    fi
}

# Install homebrew
function install_homebrew {
    if [ "$OS" = "Darwin" ]; then
        if ! has brew; then
            echo "Installing Homebrew..."
            ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" && \
            brew install "$BREW_PKGS" && echo -e "done\n"
        else
            echo "Homebrew already installed, skipping..."
        fi
    fi
}

# Install vim-plug
function install_vimplug {
    if (has vim || has nvim); then
        if has curl; then
            echo "Installing vim-plug..."
            curl -#fLo "$HOME/.vim/autoload/plug.vim" --create-dirs \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim && \
            if has vim; then
                vim +PlugInstall +qa && echo -e "done\n"
            elif has nvim; then
                nvim +PlugInstall +qa && echo -e "done\n"
            fi
        elif has wget; then
            echo "Installing vim-plug..."
            mkdir -vp "$HOME/.vim/autoload/"
            if wget --show-progress -qO "$HOME/.vim/autoload/plug.vim" \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim; then
                if has vim; then
                    vim +PlugInstall +qa && echo -e "done\n"
                elif has nvim; then
                    nvim +PlugInstall +qa && echo -e "done\n"
                fi
            fi
        else
            echo "No curl or wget found, skipping vim-plug install."
        fi
    else
        echo "No vim or neovim found, skipping vim-plug install."
    fi
    echo ""
}

# Install fzf
function install_fzf {
    if [ -x "$HOME"/.fzf/install ]; then
        echo "Installing FZF..."
        "$HOME/.fzf/install" --key-bindings --completion --no-update-rc 1>/dev/null && \
        echo "done"
    elif has git; then
        echo "Installing FZF..."
        rm -rf "$HOME/.fzf"
        git clone --depth 1 https://github.com/junegunn/fzf.git "$HOME/.fzf" && \
        "$HOME/.fzf/install" --key-bindings --completion --no-update-rc 1>/dev/null && \
        echo "done"
    else
        echo "Git not found, skipping FZF install."
    fi
    echo ""
}

# Install z
function install_z {
    if [ -f "$CONFIGDIR/z/z.sh" ]; then
        echo "Found z.sh, skipping install."
        return
    fi
    mkdir -v "$CONFIGDIR/z"
    if has curl; then
        echo "Installing z..."
        curl -#fLo "$CONFIGDIR/z/z.sh" \
        https://raw.githubusercontent.com/rupa/z/master/z.sh && \
        echo "done"
    elif has wget; then
        echo "Installing z..."
        wget --show-progress -qO "$CONFIGDIR/z/z.sh" \
        https://raw.githubusercontent.com/rupa/z/master/z.sh && \
        echo "done"
    else
        echo "No curl or wget found, skipping z install."
    fi
}

install_config
init_neovim
install_homebrew
install_vimplug
install_fzf
install_z

echo "done"
source "$HOME/.bashrc"
