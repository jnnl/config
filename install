#!/bin/bash
# dotfiles installer

set -eu

readonly scriptdir="$(realpath $(dirname ${BASH_SOURCE[0]}))"
readonly filedir="$scriptdir/files"
readonly configdir="${XDG_CONFIG_HOME:-$HOME/.config}"

err() {
    printf "!!! ERROR: $*\n"
    exit 1
}

warn() {
    printf "~~~ $*\n"
}

msg() {
    printf ">>> $*\n"
}

msg_done() {
    printf "<<< done\n\n"
}

has() {
    type -p "$1" &>/dev/null
}

is_mac() {
    test "$(uname -s)" = Darwin
}

is_linux() {
    test "$(uname -s)" = Linux
}

dl() {
    if has curl; then
        curl -#fLo $*
    elif has wget; then
        wget --show-progress -qO $*
    else
        err "no curl or wget found"
    fi
}

create_dirs() {
    msg "Creating directories..."

    directories="$(find $scriptdir/files -type d | tail -n+2 | sed 's|^'$scriptdir/files'/||')"

    local directory
    for directory in $directories; do
        mkdir -vp "$HOME/$directory"
    done

    msg_done

}

copy_files() {
    msg "Copying files..."

    files="$(find $scriptdir/files -type f | sed 's|^'$scriptdir/files'/||')"

    local file
    for file in $files; do
        cp -v "$filedir/$file" "$HOME/$file"
    done

    msg_done
}

configure_mac() {
    # Expand save panels
    defaults write -g NSNavPanelExpandedStateForSaveMode -bool true
    defaults write -g NSNavPanelExpandedStateForSaveMode2 -bool true

    # Disable automatic text meddling
    defaults write -g NSAutomaticSpellingCorrectionEnabled -bool false
    defaults write -g NSAutomaticCapitalizationEnabled -bool false
    defaults write -g NSAutomaticDashSubstitutionEnabled -bool false
    defaults write -g NSAutomaticPeriodSubstitutionEnabled -bool false
    defaults write -g NSAutomaticQuoteSubstitutionEnabled -bool false

    # Show filename extensions
    defaults write -g AppleShowAllExtensions -bool true

    # Disable inverted scrolling
    defaults write -g com.apple.swipescrolldirection -bool false

    # Enable font smoothing
    defaults write -g CGFontRenderingFontSmoothingDisabled -bool false

    # Disable animations
    defaults write -g NSAutomaticWindowAnimationsEnabled -bool false
    defaults write -g QLPanelAnimationDuration -float 0
    defaults write com.apple.finder DisableAllAnimations -bool true

    # Show full paths
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

    # Autohide Dock
    defaults write com.apple.dock autohide -bool true

    # Disable screenshot shadows
    defaults write com.apple.screencapture disable-shadow -bool true

    # Show ~/Library in Finder
    chflags nohidden ~/Library

    killall Dock Finder
}

install_homebrew() {
    if has brew; then
        warn "Homebrew already installed, skipping..."
        return
    fi

    msg "Installing Homebrew..."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

    msg_done
}

install_vimplug() {
    msg "Installing vim-plug..."

    local plugdir="$HOME/.vim/autoload"
    local url="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"

    mkdir -vp "$plugdir"
    dl "$plugdir/plug.vim" "$url"

    if has vim; then
        vim +PlugUpdate +qa
    elif has nvim; then
        nvim +PlugUpdate +qa
    else
        warn "No vim or neovim found, skipping vim-plug install."
        return
    fi

    msg_done
}

install_blocklets() {
    msg "Installing i3blocks blocklets..."

    local blockletdir="$configdir/i3blocks/blocklets"
    local url="https://github.com/vivien/i3blocks-contrib"

    if has git; then
        rm -rf "$blockletdir"
        git clone --depth 1 "$url" "$blockletdir"
    else
        warn "Git not found, skipping blocklets install."
        return
    fi

    msg_done
}

install_fzf() {
    msg "Installing fzf..."

    local fzfdir="$HOME/.fzf"
    local url="https://github.com/junegunn/fzf.git"

    if has git; then
        rm -rf "$fzfdir"
        git clone --depth 1 "$url" "$fzfdir"

        chmod ug+x "$fzfdir/install"
        "$fzfdir/install" --key-bindings \
                          --completion \
                          --no-zsh \
                          --no-fish \
                          --no-update-rc \
                          1>/dev/null
    else
        warn "Git not found, skipping fzf install."
        return
    fi

    msg_done
}

install_z() {
    msg "Installing z..."

    local zdir="$configdir/z"
    local url="https://raw.githubusercontent.com/rupa/z/master/z.sh"

    mkdir -vp "$zdir"
    dl "$zdir/z.sh" "$url"

    msg_done
}


main() {
    create_dirs
    copy_files

    if is_mac; then
        configure_mac
        install_homebrew
    elif is_linux; then
        install_blocklets
    fi

    install_fzf
    install_vimplug
    install_z

    printf "<<< all done\n"
}

main
