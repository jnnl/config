#!/bin/bash
# dotfiles installer

set -eu

readonly kernel="$(uname -s)"
readonly scriptdir="$(dirname ${BASH_SOURCE[0]})"
readonly configdir="${XDG_CONFIG_HOME:-$HOME/.config}"
readonly dotfiledir="$configdir/dotfiles"
readonly backupdir="$dotfiledir/backup"
readonly bindir="$HOME/code/bin"

die() {
    printf "ERROR: $*\n"
    exit 1
}

edone() {
    printf "done\n\n"
}

has() {
    type -p $* &>/dev/null
}

exists() {
    local file
    for file in $*; do
        test -e "$file" || return 1
    done
}

is_linux() {
    test "$kernel" = Linux
}

is_mac() {
    test "$kernel" = Darwin
}

dl() {
    if has curl; then
        curl -#fLo $*
    elif has wget; then
        wget --show-progress -qO $*
    else
        die "no curl or wget found"
    fi
}

copy() {
    cp -v "$1" "$2"
}

backup() {
    if exists "$1"; then
        copy "$1" "$2"
    else
        printf "$1 doesn't exist, skipping...\n"
    fi
}

add() {
    mkdir -vp "$(dirname $2)"
    ln -vsf "$1" "$2"
}

backup_config() {
    printf "Backing up existing config files to $backupdir...\n"
    mkdir -vp "$backupdir"

    local file
    for file in $homefiles; do
        backup "$HOME/.$file" "$backupdir/$file"
    done

    backup "$configdir/git/config" "$backupdir/git_config"
    backup "$configdir/git/ignore" "$backupdir/git_ignore"
    backup "$configdir/nvim/init.vim" "$backupdir/init.vim"
    backup "$configdir/alacritty/alacritty.yml" "$backupdir/alacritty.yml"
    backup "$configdir/kitty/kitty.conf" "$backupdir/kitty.conf"
    backup "$configdir/i3/config" "$backupdir/i3_config"
    backup "$configdir/i3status/config" "$backupdir/i3status_config"
    backup "$configdir/i3blocks/config" "$backupdir/i3blocks_config"

    edone
}

copy_config() {
    printf "Copying config files to $dotfiledir...\n"
    mkdir -vp "$dotfiledir"

    local file
    for file in $homefiles $configfiles; do
        copy "$scriptdir/$file" "$dotfiledir"
    done

    edone
}

link_config() {
    printf "Linking config files...\n"

    local file
    for file in $homefiles; do
        add "$dotfiledir/$file" "$HOME/.$file"
    done

    add "$dotfiledir/git_config" "$configdir/git/config"
    add "$dotfiledir/git_ignore" "$configdir/git/ignore"
    add "$dotfiledir/init.vim" "$configdir/nvim/init.vim"
    add "$dotfiledir/alacritty.yml" "$configdir/alacritty/alacritty.yml"

    if is_linux; then
        add "$dotfiledir/kitty.conf" "$configdir/kitty/kitty.conf"
        add "$dotfiledir/i3_config" "$configdir/i3/config"
        add "$dotfiledir/i3status_config" "$configdir/i3status/config"
        add "$dotfiledir/i3blocks_config" "$configdir/i3blocks/config"
    fi

    edone
}

configure_mac() {
    is_mac || return 1

    # Expand save panels
    defaults write -g NSNavPanelExpandedStateForSaveMode -bool true
    defaults write -g NSNavPanelExpandedStateForSaveMode2 -bool true

    # Disable automatic text meddling
    defaults write -g NSAutomaticSpellingCorrectionEnabled -bool false
    defaults write -g NSAutomaticCapitalizationEnabled -bool false
    defaults write -g NSAutomaticDashSubstitutionEnabled -bool false
    defaults write -g NSAutomaticPeriodSubstitutionEnabled -bool false
    defaults write -g NSAutomaticQuoteSubstitutionEnabled -bool false

    # Show filename extensions
    defaults write -g AppleShowAllExtensions -bool true

    # Disable inverted scrolling
    defaults write -g com.apple.swipescrolldirection -bool false

    # Enable font smoothing
    defaults write -g CGFontRenderingFontSmoothingDisabled -bool false

    # Disable animations
    defaults write -g NSAutomaticWindowAnimationsEnabled -bool false
    defaults write -g QLPanelAnimationDuration -float 0
    defaults write com.apple.finder DisableAllAnimations -bool true

    # Show full paths
    defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

    # Autohide Dock
    defaults write com.apple.dock autohide -bool true

    # Disable screenshot shadows
    defaults write com.apple.screencapture disable-shadow -bool true

    # Show ~/Library in Finder
    chflags nohidden ~/Library

    killall Dock Finder
}

install_homebrew() {
    is_mac || return 1

    if has brew; then
        printf "Homebrew already installed, skipping...\n"
        return
    fi

    printf "Installing Homebrew...\n"
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

    edone
}

install_vimplug() {
    printf "Installing vim-plug...\n"

    local plugdir="$HOME/.vim/autoload"
    local url="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"

    mkdir -vp "$plugdir"
    dl "$plugdir/plug.vim" "$url"

    if has vim; then
        vim +PlugUpdate +qa
    elif has nvim; then
        nvim +PlugUpdate +qa
    else
        printf "No vim or neovim found, skipping vim-plug install.\n"
        return
    fi

    edone
}

install_fzf() {
    printf "Installing fzf...\n"

    local fzfdir="$HOME/.fzf"
    local url="https://github.com/junegunn/fzf.git"

    if test -x "$fzfdir/install"; then
        (
        cd "$fzfdir"
        if ! git diff --quiet origin/master; then
            git stash
            git pull
        fi
        )

        "$fzfdir/install" --key-bindings \
                          --completion \
                          --no-update-rc \
                          --no-zsh \
                          --no-fish \
                          1>/dev/null
    elif has git; then
        rm -vrf "$fzfdir"
        git clone --depth 1 "$url" "$fzfdir"
        chmod ug+x "$fzfdir/install"

        "$fzfdir/install" --key-bindings --completion --no-update-rc 1>/dev/null
    else
        printf "Git not found, skipping fzf install.\n"
        return
    fi

    edone
}

install_z() {
    printf "Installing z...\n"

    local zdir="$configdir/z"
    local url="https://raw.githubusercontent.com/rupa/z/master/z.sh"

    mkdir -vp "$zdir"
    dl "$zdir/z.sh" "$url"

    edone
}

install_v() {
    printf "Installing v...\n"

    local url="https://raw.githubusercontent.com/rupa/v/master/v"

    mkdir -vp "$bindir"

    dl "$bindir/v" "$url"
    chmod ug+x "$bindir/v"

    edone
}

main() {
    local homefiles="bash_profile bashrc vimrc tmux.conf"
    local configfiles="git_config git_ignore init.vim alacritty.yml"

    if is_linux; then
        homefiles+=" xinitrc Xmodmap Xresources"
        configfiles+=" kitty.conf i3_config i3status_config i3blocks_config"
    fi

    backup_config
    copy_config
    link_config

    if is_mac; then
        configure_mac
        install_homebrew
    fi

    install_fzf
    install_vimplug
    install_z
    install_v

    printf "all done\n"
}

main
